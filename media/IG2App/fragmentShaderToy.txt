#version 330 core

uniform vec3 frontFaceColor;
uniform vec3 backFaceColor;

uniform sampler2D text1;

uniform vec3 lightPosition; // en world space
uniform vec3 lightDiffuse;

in vec3 Normal;
in vec2 vUv0;

uniform vec3 viewPos;

out vec4 fFragColor; 

void main() 
{
	vec3 color2 = vec3(texture(text1, vUv0));
	
	if(color2.x < 0.5)		
		discard;
	
	vec3 color;

	if(gl_FrontFacing)
		color = frontFaceColor; 
	else
		color = backFaceColor;

	
	// diffuse
	vec3 normal = normalize(Normal);
	vec3 lightDirection = normalize(lightPosition);
	float diffuse = max(dot(normal, lightDirection), 0.2);
	vec3 vDiffuse = lightDiffuse * diffuse * color;
	
	fFragColor = vec4(vDiffuse, 1.0);

}